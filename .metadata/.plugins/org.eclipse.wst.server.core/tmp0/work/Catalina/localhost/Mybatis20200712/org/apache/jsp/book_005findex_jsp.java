/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.27
 * Generated at: 2020-07-12 07:53:34 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;
import com.xue.model.BookPageMes;
import com.xue.model.Book;

public final class book_005findex_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.xue.model.Book");
    _jspx_imports_classes.add("com.xue.model.BookPageMes");
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP 只允许 GET、POST 或 HEAD。Jasper 还允许 OPTIONS");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write(" \r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\" \"http://www.w3.org/TR/html4/loose.dtd\">\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\t<table>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>编号：</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"id\"/>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>书名：</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"text\" id=\"name\"/>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td></td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td></td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<input type=\"button\" value=\"查询\" onclick=\"findBookByPage(1)\"/>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t\t<td>\r\n");
      out.write("\t\t\t\t<a href=\"#\">添加</a>\r\n");
      out.write("\t\t\t</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\r\n");
      out.write("\t共计 - * - 条\r\n");
      out.write("\t<table id=\"message\">\r\n");
      out.write("\t\t<tr>\r\n");
      out.write("\t\t\t<td>#</td>\r\n");
      out.write("\t\t\t<td>编号</td>\r\n");
      out.write("\t\t\t<td>书名</td>\r\n");
      out.write("\t\t\t<td>作者</td>\r\n");
      out.write("\t\t\t<td>发布日期</td>\r\n");
      out.write("\t\t\t<td>价格</td>\r\n");
      out.write("\t\t\t<td>库存</td>\r\n");
      out.write("\t\t\t<td>操作</td>\r\n");
      out.write("\t\t</tr>\r\n");
      out.write("\t</table>\r\n");
      out.write("\t\r\n");
      out.write("\t<span id=\"pageMessage\"></span>\t\t<!-- 存储页码信息 -->\r\n");
      out.write("\t<a href=\"#\" id=\"upPage\"></a>\t\t<!-- 存储上一页 -->\r\n");
      out.write("\t<span id=\"pageCount\"></span>\t\t<!-- 展示每页超链接 -->\r\n");
      out.write("\t<a href=\"#\" id=\"downPage\"></a>\t\t<!-- 存储下一页 -->\r\n");
      out.write("</body>\r\n");
      out.write("<script type=\"text/javascript\" src=\"js/jquery-1.11.2.js\"></script>\r\n");
      out.write("<script type=\"text/javascript\">\r\n");
      out.write("\t//JQ页面加载事件\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t//页面加载完成后，触发的内容\r\n");
      out.write("\t\tfindBookByPage(1);\r\n");
      out.write("\t})\r\n");
      out.write("\t\r\n");
      out.write("\tfunction findBookByPage(page) {\r\n");
      out.write("\t\t$.ajax({\r\n");
      out.write("\t\t\turl : \"BookServlet\",\r\n");
      out.write("\t\t\ttype : \"post\",\r\n");
      out.write("\t\t\tdata : {flag : \"ajaxseletebynameandpage\", name : $(\"#name\").val(), bookId : $(\"#id\").val(), currentPage : page},//传到后端的数据\r\n");
      out.write("\t\t\tdataType : \"json\", \r\n");
      out.write("\t\t\tsuccess : function (data) {\r\n");
      out.write("\t\t\t\t//注意：每次追加表格数据时，需要清除上一次追加的数据\r\n");
      out.write("\t\t\t\t$(\"#message tr:gt(0)\").remove();\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//1. 将后台响应的当前页数据展示到表格中\r\n");
      out.write("\t\t\t\t$.each(data.pageList, function(index, obj){\r\n");
      out.write("\t\t\t\t\t//创建tr和td的节点\r\n");
      out.write("\t\t\t\t\tvar tr = $(\"<tr>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + (index + 1) + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.no + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.name + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.author + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.publish + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.price + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + obj.store + \"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"<td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\"<a href='#'>修改</a>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\t\"<a href='#'>删除</a>\" + \r\n");
      out.write("\t\t\t\t\t\t\t\t\t\"</td>\" + \r\n");
      out.write("\t\t\t\t\t\t\t   \"</tr>\");\r\n");
      out.write("\t\t\t\t\t$(\"#message\").append(tr);\r\n");
      out.write("\t\t\t\t});\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//2. 展示页码信息\r\n");
      out.write("\t\t\t\t$(\"#pageMessage\").html(\"当前第\" + data.currentPage + \"页，共\" + data.totalPage + \"页\");\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//3. 展示上一页下一页超链接\r\n");
      out.write("\t\t\t\tif (data.currentPage != 1) {\r\n");
      out.write("\t\t\t\t\t$(\"#upPage\").html(\"上一页\");\r\n");
      out.write("\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\t$(\"#upPage\").html(\"\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\tif (data.currentPage != data.totalPage) {\r\n");
      out.write("\t\t\t\t\t$(\"#downPage\").html(\"下一页\");\r\n");
      out.write("\t\t\t\t}else {\r\n");
      out.write("\t\t\t\t\t$(\"#downPage\").html(\"\");\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//4. 负责给上一页和下一页超级链接加入单击事件！\r\n");
      out.write("\t\t\t\t$(\"#upPage\").attr(\"onclick\", \"findProjectByPage(\" + (data.currentPage - 1) + \")\")\r\n");
      out.write("\t\t\t\t$(\"#downPage\").attr(\"onclick\", \"findProjectByPage(\" + (data.currentPage + 1) + \")\")\r\n");
      out.write("\t\t\t\t\r\n");
      out.write("\t\t\t\t//5. 展示每页页码超级链接！\r\n");
      out.write("\t\t\t\t//注意：每次追加页码超链接之前，需要清空上次数据\r\n");
      out.write("\t\t\t\t//6. 给每页页码超链接追加单击事件！\r\n");
      out.write("\t\t\t\t$(\"#pageCount\").empty();\r\n");
      out.write("\t\t\t\tfor(var i = 1; i <= data.totalPage; i++){\r\n");
      out.write("\t\t\t\t\tvar a = $(\"<a href='#' onclick='findProjectByPage(\" + i + \")'>\" + i + \"</a><span>&nbsp;&nbsp;&nbsp;</span>\");\r\n");
      out.write("\t\t\t\t\t$(\"#pageCount\").append(a);\r\n");
      out.write("\t\t\t\t}\r\n");
      out.write("\t\t\t},\r\n");
      out.write("\t\t\terror : function (data) {\r\n");
      out.write("\t\t\t\talert(\"失败！\")\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t})\r\n");
      out.write("\t}\r\n");
      out.write("\t\r\n");
      out.write("</script>\r\n");
      out.write("</html>\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
